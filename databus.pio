.program databus

; wait for interrupt
; read 9 bits
; bit 0: 0 is read, 1 is write
; bits 1 to 8 -> data to write

set pindirs, 8           ; set pins as output
set pins, 0              ; set pins to 0

.wrap_target
  pull
  out x, 1               ; shift one bit to the X scratch register
  jmp !x read            ; if LSB = 0 => read pins

  out pins, 8            ; shift last 8 bits from OSR to the databus bins
  jmp reset_bus
read:
  in pins, 8             ; read 8 pins
  push                   ; push to input register
  set pindirs, 1
reset_bus:
  mov x, null            ; fill X scratch register with zeros
.wrap

% c-sdk {
    static inline void databus_program_init(PIO pio, uint sm, uint offset, uint pin, uint pin_count) {
      pio_sm_config c = databus_program_get_default_config(offset);

      sm_config_set_out_pins(&c, pin, pin_count);
      sm_config_set_in_pins(&c, pin);
      pio_sm_set_consecutive_pindirs(pio, sm, pin, pin_count, 1);

      for(uint i = 0; i < pin_count; i++) {
        pio_gpio_init(pio, pin + i);
      }

      pio_sm_init(pio, sm, offset, &c);
    }
%}