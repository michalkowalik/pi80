.program addressbus

.wrap_target             ; wrap target
  pull                   ; wait for data
  out x, 1               ; if LSB = 1 => set pins
  jmp x-- write          ; if LSB = 0 => reset pins

read:
  in pins, 6              ; read addressbus pins
  nop [1]
  push
  jmp reset_bus

write:
  mov x, osr             ; move data from osr to x
  mov osr, !null         ; fill OSR wit 1s
  out pindirs, 6         ; set databus pins to output

  mov osr, x             ; move data from x to osr
  out pins, 6            ; shift last 8 bits from OSR to the addressbus pins

  irq 1
  wait 0 irq 1          ; wait for the interrupt to be handled

reset_bus:
  mov x, null            ; move 0 to x
  mov osr, null         ; fill OSR wit 0s
  out pindirs, 6         ; set databus pins to input
.wrap


% c-sdk {
    static inline void addressbus_program_init(PIO pio, uint sm, uint offset, uint pin, uint pin_count) {
      pio_sm_config c = addressbus_program_get_default_config(offset);

      sm_config_set_out_pins(&c, pin, pin_count);
      sm_config_set_in_pins(&c, pin);

      for(uint i = 0; i < pin_count; i++) {
        pio_gpio_init(pio, pin + i);
      }

      // debug: slow down the clock
      //sm_config_set_clkdiv(&c, 4.0f);

      // set pins to input
      pio_sm_set_consecutive_pindirs(pio, sm, pin, pin_count, false);

      pio_sm_init(pio, sm, offset, &c);
    }
%}